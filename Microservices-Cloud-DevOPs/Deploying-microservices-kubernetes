##Kubernetes concepts
 Helmsman - Symbol(direction of a ship)

#Components
  Node
  Pod
  Deployment
  Replicaset (Always monitors the Pods)
  Service

#Features
  Container orchestration
  Easy Scaling
  Load Balancing
  Self Healing
  Zero Downtime deployments
  Cloud Neutral

  #CLUSTER
   Which is combination of Master Node and Worker Nodes -
   Master Node manages all the Worker Nodes

##### commands -
   https://github.com/in28minutes/spring-microservices-v2/tree/main/05.kubernetes
########

#To connect from command line to my cluster--->
 gcloud auth login
 gcloud container clusters get-credentials davu-cluster --zone us-central1-a --project dazzling-rex-286108

gcloud container clusters get-credentials davu--cluster-stackdrive --zone us-central1-c --project dazzling-rex-286108
 #For resizeing the nodes
1)gcloud container clusters resize --zone us-central1-c davu--cluster-stackdrive  --num-nodes=0 --project dazzling-rex-286108


 gcloud container clusters resize --zone us-central1-a davu-cluster --num-nodes=3 --project dazzling-rex-286108

# Deployment steps
1) kubectl create deployment hello-world-davu-rest-api --image=in28min/hello-world-rest-api:0.0.1.RELEASE
  (creates deployment, replicaset, pod)
2) kubectl expose deployment hello-world-davu-rest-api --type=LoadBalancer --port=8080
   (creates service)
   kubectl scale deployment hello-world-davu-rest-api --replicas=3

   kubectl set image deployment hello-world-davu-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.4-SNAPSHOT

  # rolling update strategy

  ## Kubernetes Concepts - Pods, Replica Sets & Deployments
  - Pod has IP Address
  - kubectl get pods -o wide
  - Understanding Services in Kubernetes - Always provide access to the URL
     Loadbalancer Service - which has External IP
     ClusterIP

  ## Kubernetes
      1) Master - API Server,
                   Scheduler(Schedules the pods),
                   control manager(manages overall health of cluster)
                   etcd(light weight DB-Key-Value - Disctributerd DB)
      2) Worker(Node) --> pod --> container
         it should run a docker or rocket
         Node agent (kubelet)
         Network component (kube-proxy)
         Container Runtime (CRI - docker, rkt)
         PODS
     # Kubernetes supports 5000 worker nodes in a cluster

     # Install GCloud - Google cloud SDK
     # Install kubectl

    # spring-boot:build-image -DskipTests

    # environment variables are created by kubernetes only based on the deployment name(appends to the name)

    #  Creating Declarative Configuration Kubernetes YAML for Microservices
       - kubectl apply -f deployment.yaml

    # Enable Cloud Logging API
    # Enable Stackdriver API - Monitoring, error, trace
    Environment variables can be maintained in - configmap

  **************** Configuring Liveness and Readiness Probes for Microservices with K8S *******
  # Autoscaling Microservices with Kubernetes
  - kubectl autoscale deployment currency-exchange --min=1 --max=3 --cpu-percent=5
  - kubectl get hpa







  docker run -p 8080:8080 in28min/hello-world-rest-api:0.0.1.RELEASE

  kubectl create deployment hello-world-rest-api --image=in28min/hello-world-rest-api:0.0.1.RELEASE
  kubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=8080
  kubectl scale deployment hello-world-rest-api --replicas=3
  kubectl delete pod hello-world-rest-api-58ff5dd898-62l9d
  kubectl autoscale deployment hello-world-rest-api --max=10 --cpu-percent=70
  kubectl edit deployment hello-world-rest-api #minReadySeconds: 15
  kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.2.RELEASE

  gcloud container clusters get-credentials in28minutes-cluster --zone us-central1-a --project solid-course-258105
  kubectl create deployment hello-world-rest-api --image=in28min/hello-world-rest-api:0.0.1.RELEASE
  kubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=8080
  kubectl set image deployment hello-world-rest-api hello-world-rest-api=DUMMY_IMAGE:TEST
  kubectl get events --sort-by=.metadata.creationTimestamp
  kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.2.RELEASE
  kubectl get events --sort-by=.metadata.creationTimestamp
  kubectl get componentstatuses
  kubectl get pods --all-namespaces

  kubectl get events
  kubectl get pods
  kubectl get replicaset
  kubectl get deployment
  kubectl get service

  kubectl get pods -o wide

  kubectl explain pods
  kubectl get pods -o wide

  kubectl describe pod hello-world-rest-api-58ff5dd898-9trh2

  kubectl get replicasets
  kubectl get replicaset

  kubectl scale deployment hello-world-rest-api --replicas=3
  kubectl get pods
  kubectl get replicaset
  kubectl get events
  kubectl get events --sort.by=.metadata.creationTimestamp

  kubectl get rs
  kubectl get rs -o wide
  kubectl set image deployment hello-world-rest-api hello-world-rest-api=DUMMY_IMAGE:TEST
  kubectl get rs -o wide
  kubectl get pods
  kubectl describe pod hello-world-rest-api-85995ddd5c-msjsm
  kubectl get events --sort-by=.metadata.creationTimestamp

  kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.2.RELEASE
  kubectl get events --sort-by=.metadata.creationTimestamp
  kubectl get pods -o wide
  kubectl delete pod hello-world-rest-api-67c79fd44f-n6c7l
  kubectl get pods -o wide
  kubectl delete pod hello-world-rest-api-67c79fd44f-8bhdt

  kubectl get componentstatuses
  kubectl get pods --all-namespaces

  gcloud auth login
  kubectl version
  gcloud container clusters get-credentials in28minutes-cluster --zone us-central1-a --project solid-course-258105

  kubectl rollout history deployment hello-world-rest-api
  kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.3.RELEASE --record=true
  kubectl rollout undo deployment hello-world-rest-api --to-revision=1

  kubectl logs hello-world-rest-api-58ff5dd898-6ctr2
  kubectl logs -f hello-world-rest-api-58ff5dd898-6ctr2

  kubectl get deployment hello-world-rest-api -o yaml
  kubectl get deployment hello-world-rest-api -o yaml > deployment.yaml
  kubectl get service hello-world-rest-api -o yaml > service.yaml
  kubectl apply -f deployment.yaml
  kubectl get all -o wide
  kubectl delete all -l app=hello-world-rest-api

  kubectl get svc --watch
  kubectl diff -f deployment.yaml
  kubectl delete deployment hello-world-rest-api
  kubectl get all -o wide
  kubectl delete replicaset.apps/hello-world-rest-api-797dd4b5dc

  kubectl get pods --all-namespaces
  kubectl get pods --all-namespaces -l app=hello-world-rest-api
  kubectl get services --all-namespaces
  kubectl get services --all-namespaces --sort-by=.spec.type
  kubectl get services --all-namespaces --sort-by=.metadata.name
  kubectl cluster-info
  kubectl cluster-info dump
  kubectl top node
  kubectl top pod
  kubectl get services
  kubectl get svc
  kubectl get ev
  kubectl get rs
  kubectl get ns
  kubectl get nodes
  kubectl get no
  kubectl get pods
  kubectl get po

  kubectl delete all -l app=hello-world-rest-api
  kubectl get all

  kubectl apply -f deployment.yaml
  kubectl apply -f ../currency-conversion/deployment.yaml
