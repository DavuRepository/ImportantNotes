1) Rest
2) Small well choosen Deplyment units
3) Cloud Enabled

Springcloud config Server - To maintain the configuration of various environments in a single repository
Dynamically scale up and down
1) Naming Server(Eureka)
2) Ribbon(client side load Balancing)
3) Feign (Easier rest clients)

Visibility and Monitoring
1)Zipkin Distributing Server - [Sleuth - to assign common requestID across microservices]
2)Netflix  API Gateway - Netflix zuul API

Falut Tolerance
1) Hystrix


Advantages of Microservices -
1) Adaption of new technologies and process
2) Dynamic scaling(cloud enabled)
3) Faster release cycles(new features to market)


*******************Latest Version of SpringBoot(> 2.3.2) and Spring Cloud ******************
1) Spring Cloud Load Balancer instead of Ribbon
2) Spring Cloud Gateway instead of zuul (Has some disadvantage - not supports non blocking API)
3) Resilience4j instead of Hystrix


- Spring cloud config server - Centrailized Repositry

- RestTemplate - To call other Restfull services
- FeignClient
- Naming Server or Service Registry - Eureka Server - @EnableEurekaServer

- if you use FeignClient and Eureka - Loadbalancer is free.

- Setting up Spring Cloud API Gateway - [Previous versions zuul-api-Gateway]
  To setup common features like authentication,logging

- api-gateway - project
********
   http://localhost:8765/currency-exchange/currency-exchange/from/USD/to/INR

   spring.application.name=api-gateway
   server.port=8765

    eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

    #spring.cloud.gateway.discovery.locator.enabled=true
    #spring.cloud.gateway.discovery.locator.lowerCaseServiceId=true

    spring.sleuth.sampler.probability=1.0

******
-  Exploring Routes with Spring Cloud Gateway
# The URL goes through --> api-gateway --> configurationfile-->eureka server -->

- Getting started with Circuit Breaker - Resilience4j
    dependencies {
    compile "io.github.resilience4j:resilience4j-spring-boot2:${resilience4jVersion}"
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-aop')
    }

- If the service is down for some time -  @Retry() for the multiple attempts and call the fall back method

- If the service is down for forever - @CircuitBreaker
  Three states of CircuitBreaker -
     1) closed
     2) open
     3) half-open

  - Exploring Rate Limiting and BulkHead Features of Resilience4j - V2
    @RateLimiter(name = "default") -- 10s => allow 10000 requests
    @BulkHead(name = "default") => max concurrent calls
******
Docker Compose file - You define all the containers and start at a time.

-Please refer docker compose file on github of in28Minutes
https://github.com/in28minutes/spring-microservices-v2/blob/main/04.docker/backup/docker-compose-06-final.yaml


******************Docker, Kubernetes and Microservices - Made for each other*****************
Refere - Deploying-microservices-Kubernetes







# Rest/Autonomous Service, Individually deployable and cloud enabled

Design patterns
1) Aggregation pattern
2) Distributed tracing pattern
3) Circuit breaker
4) Blue- Green deployment

There are many other patterns used with microservice architecture, like Sidecar, Chained Microservice,
Branch Microservice, Event Sourcing Pattern, Continuous Delivery Patterns, and more

ECS Fargate
----------------
#Connecting the DB
  1) Configure the environment variables of DB the container(Task)
  2) Create an RDS and create security Group(attach to RDS), this security group should allow access from the application(that is using RDS)
#communication between two Services
  1) Both should be on same network
  2) communicate to the second service by setting the URL in ENVIROMENT variable
  3)Two services can be run using same Task(Same container)
#Parameter Store (In System Manager)
  1) All the configuration information(names/values of environment variables) is maintained here
  2) Centralized configuration management
#AWS - X-RAY ---> Distributed tracing system
 1) pom.xml - aws-xray-recorder-sdk-spring
 2) AwsXrayConfig.java
 3) XRayInspector.java
   @RestController
   @XRayEnabled
   public class CurrencyExchangeController {

#Auto Scaling aand Load Balancing --->
    Load balancer
    /         \
Listener      Listener
   |              |
 Rule            Rule
  |                |
 Target Group      Target group
  /  |  \            /   |    \
 S1  S2  S4         SS1  SS2   SS3

# Auto Scaling -->
 1) Policy Type
    a) Target Tracking
    b) Step Scaling
 # if request > certain threshold
 # memory utilization
 # CPU utilization
 # Scale out ---> Increase
 # Scale in ---> Decrease

## APP Mesh -----> Monitors all the Microservices and communicates with each other
 #The pre-requisite for App Mesh is we need to configure Service Discovery on all Microservices(Common name irrespective of tasks)
