# Maintaining 100 Apps with 1000's of Microservices is painful and chaos
# Mostly run in docker containers
# Running directly in docker engine without any container orchestration engine(COS) - cannot accomplish the features of clustering, scalability and Scheduling
# COE features
  1) clustering
  2) Scheduling
  3) Scalability
  4) Load balancing
  5) Fault tolerance
  6) Deployment(Rolling update, Canary - no  downtime)

# COE Engines (Top 3)
  1) Kubernetes from CNCF
  2) Marathon from Apache Mesos
  3) Docker Swarm from Docker Inc
  4) Cloud specific COE
     a) Google Kubernetes Service(GKS)
     b) AWS (ECS)
     c) Azure (Azure container services)
  5) Rancher (Can be host on more than one server)
  6) Nomad(Clustering and Scheduling, Unix flavour)

  ##Kubernetes
   1) Master -
      a)  API Server - Cluster Gateway and also gatekeepr for authentication
      b)  Scheduler - Schedules the pods, check the availability of resources on node and decide to create the pod
      c)  control manager - detects the cluster state changes (when pods die)
      d)  etcd - light weight DB-Key-Value (Every change in the cluster is stored in it)
   2) Worker(Node) --> pod --> container
      a)  Docker or rocket container runtime
      b)  kubelet - communicates/interacts with both - the container and node
      c) kube-proxy - forwards the requests from services to PODS

  # Kubernetes supports 5000 worker nodes in a cluster
--------------------------------------------------------Tech World by Nana---------------------------------------------------------------------
POD -   Each pod gets it own IP address
Service - Permanent IP address
Ingress - Customized URL

ConfigMap -  external configuration of your application like DB_URL = mongo-db
Secret - Used to store secret data. base64 encoded form , usename and pwd

volumes - Data storage

Repilicas(two pods) - are connected through service - Load Balanceer

Deploymnet - It is a blue print. For Stateless Apps (ex - can also used to define replicasets)

StatefulSet =  For Statrfull Apps - Databases (This is not a simple task, that's why they are manager outside the cluster)

###
kubectl create deployment nginx-dep1 --image=nginx
kubectl get deployment
kubectl get pod
kubectl get replicatset

Layers of abstraction

1) Deployment manages a
     |
2) Replicasets manages a
      |
3)  Pods is an abstraction of container
     |
4) container        
