docker run -p 5000:5000 [XYZ/image] - docker container run -p 5000:5000 [XYZ/image]
docker run -p 5000:5000 -d [XYZ/image]
docker logs [id]
docker container ls -a
docker images
docker tag xyz/restservice:0.0.1.Release xyz/restservice:latest
docker search [image]
docker history [image ID]
docker image inspect [image ID]
docker remove image [image ID]

docker container pause [image ID]
docker container logs -f [image ID]
docker container unpause [image ID]
docker container inspect [image ID]
docker container prune  - Removes all the stopped containers
docker container stop [image ID] - gracefully shutdowns the container
docker container kill [image ID]
docker container run -p 5000:5000 -d --restart=always [XYZ/image] -> when docker starts, automatically starts the container

docker events
docker top [image ID] -> shows all the  process running in that container
docker status ->
docker container run -p 5000:5000 -m 512m -cpu-quota 5000 -d [XYZ/image] -> memory allocation

docker system df - Disk usage

---------------------------------------------------------------------------------------------------------------------------------------------
DockerJava image creation	 --
1)Manual running the step by step to create a docker Image
  a)Create a application Jar file
  b)Run the openjdk:8-jdk-alpine - [creates a container]-docker run -dit openjdk:8-jdk-alpine,docker container exec containerName ls /tmp
  c)Copy the application jar into the container   - docker container cp target/application.jar containerName:/tmp
  d)Save the new container(copied) - docker container commit --change='CMD ["Java","-jar","/tmp/application.jar"]' containerName newName
  e)Run the container
2)Create DockerFile and run - Using docker build command - [docker build -t imageName .]
3)Spotify using DockerFile
4)unpack plugin using DockerFile
5)JIB - Just plugin without any DockerFile - Only for Java
6)fabric8io - It is first came into market - 2015
----------------------------------------------------------------------------------------------------------------------------------------------
Pushing the Docker image to the dockerhub --
1)Create an account in the dockerhub.
2)Create a image using Maven-Plugin(spotify) and Docker file.
3)Run the Docker image in the local Docker engine.
4)docker container ls
5)Take the docker id and commit the image for example - [docker commit 9a77abd8e544 davudocker/aws-hello-world-rest-api-1:1]
6)docker images
7)docker push davudocker/aws-hello-world-rest-api-1:1
--------------------------------------------------------
1) Creating of images
   a) spotify
   b) JIB
   c) fabric8io

## Creation of war file in spring boot with out tomcat
    a) make the tomcat dependency scope as provided
    b) extend the springbootApplication class from springbootservletinitializer
---------------------------------------------------------------
## Connecting to MySqL and Springboot
    a) Need to establish network bridge between two containers(MySQL & Springboot)
  ex:: docker container run -p 8080:8080 --link=mysql -e RDS_HOSTNAME=mysql [imageName+tag] - Not recommended approach
  ##docker network ls
     A) BRIDGE
     B) HOST
     C) NONE
## Create custom network -> refer in28minutes documentation
***************Docker Volumes******************
append  to the docker run ---> "--volume mysql-database-volume:/var/lib/mysql"
# Are used to communicate between host(files/folders) and container

******FRONT END DOCKER IMAGE*********
2 stage builds are better when multiple developers are creating the images - It will be same (JDK and MAVEN builds are run on container)


**************Docker Compose**************
# if you want build/start multiple isolated containers use docker compose
# scaling the services in DOCKER - docket-compose scale currency-exchange-service=2



-----------------------------------------------------------------------------------------------------------------------
sudo docker build -t currency-exchange:1.0 .
sudo docker run -d -p 8080:8080 -t spring-boot:1.0











##########################################################################################
###COMMANDS

docker --version
docker run -p 5000:5000 in28min/hello-world-python:0.0.1.RELEASE
docker run -p 5000:5000 in28min/hello-world-java:0.0.1.RELEASE
docker run -p 5000:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker run -d -p 5000:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker run -d -p 5001:5000 in28min/hello-world-python:0.0.1.RELEASE
docker logs 04e52ff9270f5810eefe1f77222852dc1461c22440d4ecd6228b5c38f09d838e
docker logs c2ba
docker images
docker container ls
docker container ls -a
docker container stop f708b7ee1a8b
docker run -d -p 5001:8080 in28min/hello-world-rest-api:0.0.1.RELEASE
docker pull mysql
docker search mysql
docker image history in28min/hello-world-java:0.0.1.RELEASE
docker image history 100229ba687e
docker image inspect 100229ba687e
docker image remove mysql
docker image remove in28min/hello-world-java:0.0.1.RELEASE
docker container rm 3e657ae9bd16
docker container ls -a
docker container pause 832
docker container unpause 832
docker container stop 832
docker container inspect ff521fa58db3
docker container prune
docker system
docker system df
docker system info
docker system prune -a
docker top 9009722eac4d
docker stats 9009722eac4d
docker container run -p 5000:5000 -d -m 512m in28min/hello-world-java:0.0.1.RELEASE
docker container run -p 5000:5000 -d -m 512m --cpu-quota=50000  in28min/hello-world-java:0.0.1.RELEASE
docker system events

docker container stats 4faca1ea914e3e4587d1d790948ec6cb8fa34f26e900c12632fd64d4722fd59a
docker stats 42f170966ce613d2a16d7404495af7b3295e01aeb9142e1fa1762bbdc581f502

cd /in28Minutes/git/devops-master-class/projects/hello-world/hello-world-python
docker build -t in28min/hello-world-python:0.0.2.RELEASE .
docker run -p 5000:5000 -d in28min/hello-world-python:0.0.2.RELEASE
docker history e66dc383f7a0
docker push in28min/hello-world-python:0.0.2.RELEASE

cd ../hello-world-nodejs/
docker build -t in28min/hello-world-nodejs:0.0.2.RELEASE .
docker container run -d -p 5000:5000 in28min/hello-world-nodejs:0.0.2.RELEASE
docker push in28min/hello-world-nodejs:0.0.2.RELEASE

cd ../hello-world-java/
docker build -t in28min/hello-world-java:0.0.2.RELEASE .
docker run -d -p 5000:5000 in28min/hello-world-java:0.0.2.RELEASE
docker push in28min/hello-world-java:0.0.2.RELEASE

docker run -d -p 5001:5000 in28min/hello-world-nodejs:0.0.3.RELEASE ping google.com


docker run -d -p 8000:8000 --name=currency-exchange in28min/currency-exchange:0.0.1-RELEASE
docker run -d -p 8100:8100 --name=currency-conversion in28min/currency-conversion:0.0.1-RELEASE

docker network ls
docker network inspect bridge

docker run -d -p 8100:8100 --env CURRENCY_EXCHANGE_SERVICE_HOST=http://currency-exchange --name=currency-conversion --link currency-exchange in28min/currency-conversion:0.0.1-RELEASE

docker network create currency-network
docker container stop currency-exchange
docker container stop currency-conversion
docker run -d -p 8000:8000 --name=currency-exchange --network=currency-network in28min/currency-exchange:0.0.1-RELEASE
docker run -d -p 8100:8100 --env CURRENCY_EXCHANGE_SERVICE_HOST=http://currency-exchange --name=currency-conversion --network=currency-network in28min/currency-conversion:0.0.1-RELEASE

docker-compose --version
cd ../../microservices/
docker-compose up
docker-compose up -d
docker container ls
docker network ls
docker network inspect microservices_currency-compose-network
docker-compose down
docker container ls -a
docker system prune -a
docker-compose config
docker-compose images
docker-compose ps
docker-compose top

docker build -t in28min/hello-world-java:0.0.1.RELEASE .
docker push in28min/hello-world-java:0.0.1.RELEASE

docker build -t in28min/hello-world-python:0.0.1.RELEASE .
docker push in28min/hello-world-python:0.0.1.RELEASE

docker build -t in28min/hello-world-nodejs:0.0.1.RELEASE .
docker push in28min/hello-world-nodejs:0.0.1.RELEASE
