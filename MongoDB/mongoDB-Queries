@ net stop MongoDB
@ mongod --dbpath "my/new/path" (on Windows, use backslashes + the drive name => mongod --dbpath "C:\my\path").

@ mongo "mongodb+srv://sandbox.9ezyl.mongodb.net/sandbox" --username m001-student"

@ m001-mongodb-basics

@ show dbs

@ use sample_training

@ show collections


## Data is stored in BSON and viewed in JSON

  mongodump --uri "mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies"
  mongoexport --uri="mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies" --collection=sales --out=sales.json
  mongorestore --uri "mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies"  --drop dump
  mongoimport --uri="mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies" --drop sales.json

############ DATA EXPLORER #########

## FIND

db.zips.find({"state": "NY"})

db.zips.find({"state": "NY"}).count()

db.zips.find({"state": "NY", "city": "ALBANY"})

db.zips.find({"state": "NY", "city": "ALBANY"}).pretty()

db.inspections.find({"birth year":1961, "start station name" : "Howard St & Centre St"})

### What does it do in the mongo shell? Iternates through the cursor results
-------------------------------------------------------------------------------

## insert
 1)  _id id the unique ID

db.inspections.insert([{ "_id": 1, "test": 1 },{ "_id": 1, "test": 2 },
                       { "_id": 3, "test": 3 }],{ "ordered": false })

db.pets.insert([ { "_id": 1, "pet": "cat" },
				 { "_id": 1, "pet": "dog" },
                 { "_id": 3, "pet": "fish"},
				 { "_id": 4, "pet": "snake"}],
				 { "ordered": false })

db.pets.insert({
 "_id": ObjectId("5ec414e5e722bb1f65a25451"),
 "pet": "wolf",
 "domestic?": false,
 "diet": "carnivorous",
 "climate": ["polar", "equatorial", "continental", "mountain"]
})
---------------------------------------------------------------------
#Update Operators - enables to modify the data
 ex : $inc , $set, $unset
#Query Operators -
 #Comparision Operators ---->
 ex : $eq,$neq, $lt, $gt, $gte, $lte

db.trips.find({ "tripduration": { "$lte" : 70 },
                "usertype": { "$ne": "Subscriber" } }).pretty()

db.zips.find({"pop" : {"$lt":1000}}).count()
db.trips.find({"birth year":1998}).count()
db.trips.find({"birth year":{"$gt":1998}}).count()
------------------------------------------------------------------
#Logic Operators --->
 $and, $or, $nor, $not
 db.routes.find({ "$and": [ { "$or" :[ { "dst_airport": "KZN" },
                                    { "src_airport": "KZN" }
                                  ] },
                          { "$or" :[ { "airplane": "CR2" },
                                     { "airplane": "A81" } ] }
                         ]}).pretty()
db.inspections.find({$and:[{"sector":"Home Improvement Contractor - 100"},{"result":"Out of  --> compares the values in the same documentBusiness"}]}).count()
db.companies.find({$and:[{$or:[{"founded_year":2004},{"founded_month":10}]},{$or:[{"category_code":"social"},{"category_code":"web"}]}]})

$expr --> compares the values in the same document

db.trips.find({ "$expr": { "$eq": [ "$end station id", "$start station id"] }
              }).count()

db.trips.find({ "$expr": { "$and": [ { "$gt": [ "$tripduration", 1200 ]},
                                       { "$eq": [ "$end station id", "$start station id" ]}
                                     ]}}).count()

  -------------------------------------------------------------------------
  ## Array Operators --->

  db.listingsAndReviews.find({ "amenities": {
                                  "$size": 20,
                                  "$all": [ "Internet", "Wifi",  "Kitchen",
                                           "Heating", "Family/kid friendly",
                                           "Washer", "Dryer", "Essentials",
                                           "Shampoo", "Hangers",
                                           "Hair dryer", "Iron",
                                           "Laptop friendly workspace" ]
                                         }
                            }).pretty()

# Array Operators and Projection
db.listingsAndReviews.find({ "amenities": "Wifi" },
                           { "price": 1, "address": 1, "_id": 0 }).pretty()
# Array 0f documents in main documents
db.grades.find({ "scores": { "$elemMatch": { "type": "extra credit" } }}).pretty()


db.companies.find({ "offices": { "$elemMatch": { "city": "Seattle" }}})

#Array Operators and Sub-Documents


db.companies.find({ "relationships.0.person.first_name": "Mark",
                    "relationships.0.title": { "$regex": "CEO" } },
                  { "name": 1 }).count()

db.trips.find({ "start station location.coordinates": {"$lte":-74} }).count()

db.inspections.find({ "address.city": "NEW YORK" }).count()

---------------------------------------------------------------------------------
##  Aggregations

//Find one document in the collection and only include the address field in the resulting cursor.
db.listingsAndReviews.findOne({ },{ "address": 1, "_id": 0 })
//Project only the address field value for each document, then group all documents into one document per address.country value.
db.listingsAndReviews.aggregate([ { "$project": { "address": 1, "_id": 0 }},
                                  { "$group": { "_id": "$address.country" }}])
//Project only the address field value for each document, then group all documents into one document per address.country value,
and count one for each document in each group.

db.listingsAndReviews.aggregate([
                                { "$project": { "address": 1, "_id": 0 }},
                                { "$group": { "_id": "$address.country",
                                "count": { "$sum": 1 } } }
                                  ])
-----------------------------------------------------------------------------------------
## Sort and Limit
use sample_training

db.zips.find().sort({ "pop": 1 }).limit(1)

db.zips.find({ "pop": 0 }).count()

db.zips.find().sort({ "pop": -1 }).limit(1)

db.zips.find().sort({ "pop": -1 }).limit(10)

db.zips.find().sort({ "pop": 1, "city": -1 })
------------------------------------------------------------------------------------------
## Upsert - Update or Insert?

db.iot.updateOne({ "sensor": r.sensor, "date": r.date,
                   "valcount": { "$lt": 48 } },
                         { "$push": { "readings": { "v": r.value, "t": r.time } },
                        "$inc": { "valcount": 1, "total": r.value } },
                 { "upsert": true })
---------------------------------------------------------------------------------------------
## From Udemy Course
Important: We will regularly start with a clean database server (i.e. all data was purged) in this course.

To get rid of your data, you can simply load the database you want to get rid of (use databaseName) and then execute db.dropDatabase().

Similarly, you could get rid of a single collection in a database via db.myCollection.drop().
